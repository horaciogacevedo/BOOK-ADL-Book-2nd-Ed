# general libraries
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
from scipy.optimize import curve_fit

# Referring to the following cell, if you want to re-clone a repository
# inside the google colab instance, you need to delete it first. 
# You can delete the repositories contained in this instance executing 
# the following two lines of code (deleting the # comment symbol).

# !rm -rf ADL-Book-2nd-Ed 

# This command actually clone the repository of the book in the google colab
# instance. In this way this notebook will have access to the modules
# we have written for this book.

# Please note that in case you have already run this cell, and you run it again
# you may get the error message:
#
# fatal: destination path 'ADL-Book-2nd-Ed' already exists and is not an empty directory.
# 
# In this case you can safely ignore the error message.

!git clone https://github.com/toelt-llc/ADL-Book-2nd-Ed.git

# This cell imports some custom written functions that we have created to 
# make the plotting easier. You don't need to undertsand the details and 
# you can simply ignore this cell.
# Simply run it with CMD+Enter (on Mac) or CTRL+Enter (Windows or Ubuntu) to
# import the necessary functions.

import sys
sys.path.append('ADL-Book-2nd-Ed/modules/')

from style_setting import set_style

def func_0(p, a):
  """Zero-degree polynomial.""" 
  return a

def func_1(p, a, b):
  """One-degree polynomial."""
  return a+b*p

def func_2(p, a, b, c): 
  """Two-degree polynomial."""
  return a + b*p + c*p**2

def func_21(p, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, q, r, s, t, u, v, x):
  """Twenty-one-degree polynomial."""
  return a + b*p + c*p**2 + d*p**3 + e*p**4 + f*p**5 + g*p**6 + h*p**7 + i*p**8 + j*p**9 + k*p**10 + l*p**11 + m*p**12 + n*p**13 + o*p**14 + q*p**15 + r*p**16 + s*p**17 + t*p**18 + u*p**19 + v*p**20 + x*p**21

x = np.arange(-5.0, 5.0, 0.05, dtype = np.float64) 
y = func_2(x, 1, 2, 3) + 18.0 * np.random.normal(0, 1, size = len(x))

# The following line contains the path to fonts that are used to plot result in
# a uniform way.

f = set_style().set_general_style_parameters()

fig = plt.figure()
ax = fig.add_subplot(111)

ax.scatter(x, y, color = 'blue', linewidths = 3)

plt.ylabel('y', fontproperties = fm.FontProperties(fname = f))
plt.xlabel('x', fontproperties = fm.FontProperties(fname = f))

plt.ylim(-50, 110)
plt.xlim(-6, 6)

plt.axis(True)
#plt.savefig('overfitting_dataset.png', dpi = 300)
plt.show()

popt, pcov = curve_fit(func_1, x, y)

fig = plt.figure()
ax = fig.add_subplot(111)

ax.scatter(x, y, color = 'blue', linewidths = 3)
ax.plot(x, func_1(x, popt[0], popt[1]), lw = 3, color = 'red')

plt.ylabel('y', fontproperties = fm.FontProperties(fname = f))
plt.xlabel('x', fontproperties = fm.FontProperties(fname = f))

plt.ylim(-50, 110)
plt.xlim(-6, 6)

plt.axis(True)
#plt.savefig('too_simple.png', dpi = 300)
plt.show()

popt, pcov = curve_fit(func_21, x, y)

fig = plt.figure()
ax = fig.add_subplot(111)

ax.scatter(x, y, color = 'blue', linewidths = 3)
ax.plot(x, func_21(x, *popt), lw = 3, color = 'red')

plt.ylabel('y', fontproperties = fm.FontProperties(fname = f))
plt.xlabel('x', fontproperties = fm.FontProperties(fname = f))

plt.ylim(-50, 110)
plt.xlim(-6, 6)

plt.axis(True)
#plt.savefig('too_complex.png', dpi = 300)
plt.show()

popt, pcov = curve_fit(func_2, x, y)

fig = plt.figure()
ax = fig.add_subplot(111)

ax.scatter(x, y, color = 'blue', linewidths = 3)
ax.plot(x, func_2(x, *popt), lw = 3, color = 'red')

plt.ylabel('y', fontproperties = fm.FontProperties(fname = f))
plt.xlabel('x', fontproperties = fm.FontProperties(fname = f))

plt.ylim(-50, 110)
plt.xlim(-6, 6)

plt.axis(True)
#plt.savefig('right.png', dpi = 300)
plt.show()

yy = []
poptl = []
for i in range (0, 10):
    np.random.seed(seed = i)
    yy.append(func_2(x, 1, 2, 3) + 18.0 * np.random.normal(0, 1, size = len(x)))
    popt, _ = curve_fit(func_21, x, yy[i])
    poptl.append(popt)

fig = plt.figure()
ax = fig.add_subplot(111)

for i in range(0, 10):
    ax.plot(x, func_21(x, *poptl[i]),  lw = 3)

plt.ylabel('y', fontproperties = fm.FontProperties(fname = f))
plt.xlabel('x', fontproperties = fm.FontProperties(fname = f))

plt.ylim(-15, 120)
plt.xlim(-6, 6)

plt.axis(True)
#plt.savefig('models.png', dpi = 300)
plt.show()

yy = []
poptl = []
for i in range (0, 10):
    np.random.seed(seed = i)
    yy.append(func_2(x, 1, 2, 3) + 18.0 * np.random.normal(0, 1, size = len(x)))
    popt, _ = curve_fit(func_1, x, yy[i])
    poptl.append(popt)

fig = plt.figure()
ax = fig.add_subplot(111)

for i in range(0, 10):
    ax.plot(x, func_1(x, *poptl[i]),  lw=3)

plt.ylabel('y', fontproperties = fm.FontProperties(fname = f))
plt.xlabel('x', fontproperties = fm.FontProperties(fname = f))

plt.ylim(-15, 120)
plt.xlim(-6, 6)

plt.axis(True)
#plt.savefig('models2.png', dpi = 300)
plt.show()


